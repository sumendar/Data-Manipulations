{
  "name": "Data-manipulations",
  "tagline": "",
  "body": "```python\r\n#creating of dataframe by using 4 vectors\r\nfy <- c(2010,2011,2012,2010,2011,2012,2010,2011,2012)\r\ncompany <- c(\"Apple\",\"Apple\",\"Apple\",\"Google\",\"Google\",\r\n\"Google\",\"Microsoft\",\"Microsoft\",\"Microsoft\")\r\nrevenue <- c(65225,108249,156508,29321,37905,50175,62484,\r\n69943,73723)\r\nprofit <- c(14013,25922,41733,8505,9737,10737,18760,23150,\r\n16978)\r\ncompaniesData <- data.frame(fy, company, revenue, profit)\r\n```\r\n\r\n```python\r\n#head(companiesData)\r\nstr(companiesData)\r\n```\r\n\r\n```python\r\nsummary(companiesData)\r\n```\r\n\r\n```python\r\n#convert fy into factor\r\ncompaniesData$fy <- factor(companiesData$fy,ordered = TRUE)\r\n\r\n```\r\n\r\n```python\r\n# adding  a column to an existing dataframe\r\ncompaniesData$margin <- (companiesData$profit/companiesData$revenue)*100\r\n\r\n```\r\n\r\n```python\r\nhead(companiesData)\r\n```\r\n\r\n```python\r\nstr(companiesData)\r\n\r\n```\r\n\r\n```python\r\ncompaniesData$margin <- round(companiesData$margin, 1)\r\n```\r\n\r\n```python\r\nhead(companiesData)\r\n```\r\n\r\n```python\r\n#Delete perticular column\r\ncompaniesData <-companiesData[,c(1:4)]\r\n```\r\n\r\n```python\r\nhead(companiesData)\r\n```\r\n\r\n**Syntax 2: R’s transform() function:**  \r\nsum of two columns and store that into\r\na new column with transform(), you would use code such as:\r\n**Syntax:**\r\ndataFrame\r\n<- transform(dataFrame, newColumn =  \r\noldColumn1 + oldColumn2)\r\n\r\n```python\r\ncompaniesData <- transform(companiesData, margin =\r\nround((profit/revenue) * 100, 1))\r\n```\r\n\r\n```python\r\ncompaniesData\r\n\r\n```\r\n\r\n```python\r\n#data manipulate by using apply function\r\n#apply(companiesData, 1, function(x) sum(x))\r\n    \r\n```\r\n\r\n```python\r\napply(companiesData[,c('revenue', 'profit')], 1,\r\nfunction(x) sum(x))\r\n```\r\n\r\n```python\r\ncompaniesData$sums <- apply(companiesData[,\r\nc('revenue', 'profit')], 1, function(x) sum(x))\r\n```\r\n\r\n```python\r\ncompaniesData\r\n```\r\n\r\n```python\r\ncompaniesData$margin <- apply(companiesData[,\r\nc('revenue', 'profit')], 1,\r\nfunction(x) { (x[2]/x[1]) * 100 } )\r\n```\r\n\r\n```python\r\ncompaniesData\r\n\r\n```\r\n\r\n```python\r\nhighestMargin <- max(companiesData$margin)\r\nhighestMargin\r\n```\r\n\r\n```python\r\nhighestMargin <- companiesData[companiesData$margin == max(companiesData$margin),]\r\nhighestMargin\r\ncompaniesData$margin == max(companiesData$margin)\r\n```\r\n\r\n```python\r\n#?subset\r\n\r\n\r\nhighestMargin <- subset(companiesData,margin==max(margin))\r\n#airquality\r\n#subset(airquality, Temp > 80, select = c(Ozone, Temp))\r\n```\r\n\r\n```python\r\nhighestMargin\r\n```\r\n\r\n# Dplyr\r\n\r\n**syntax:**\r\nddply(mydata, c('column name of a factor to group by',  \r\n'column\r\nname of the second factor to group by'), summarize  \r\nOR transform, newcolumn =\r\nmyfunction(column name(s) I  \r\nwant the function to act upon))\r\n\r\n```python\r\nlibrary(\"plyr\")\r\ncompaniesData\r\n```\r\n\r\n```python\r\nhighestProfitMargins <- ddply(companiesData,'company', summarize, bestMargin = max(margin))\r\nhighestProfitMargins\r\n```\r\n\r\n```python\r\nhighestProfitMargins <- ddply(companiesData,\r\n'company', transform, bestMargin = max(margin))\r\n```\r\n\r\n```python\r\nhighestProfitMargins\r\n\r\n```\r\n\r\n```python\r\nhighestProfitMargins <- ddply(companiesData,\r\n'company', function(x) x[x$margin==max(x$margin),])\r\n```\r\n\r\n```python\r\nhighestProfitMargins\r\ncompaniesData\r\n\r\n\r\n```\r\n\r\n```python\r\ncompaniesData[companiesData$margin==max(companiesData$margin),]\r\n```\r\n\r\n```python\r\nhighestProfitMargins <- ddply(companiesData,\r\n'company', summarize, bestMargin = max(margin))\r\n```\r\n\r\n```python\r\nhighestProfitMargins\r\n```\r\n\r\n```python\r\n#install.packages(\"dplyr\",repos = \"http://cran.us.r-project.org\", type=\"source\",dependencies=TRUE)\r\nlibrary(\"dplyr\")\r\nmyresults <- companiesData %>%\r\ngroup_by(company) %>%\r\nmutate(highestMargin = max(margin), lowestMargin =\r\nmin(margin))\r\n```\r\n\r\n```python\r\nmyresults\r\n```\r\n\r\n```python\r\nhighestProfitMargins <- companiesData %>%\r\ngroup_by(company) %>%\r\nsummarise(bestMargin = max(margin))\r\n```\r\n\r\n```python\r\nhighestProfitMargins\r\n```\r\n\r\n```python\r\nvDates <- as.Date(c(\"2013-06-01\", \"2013-07-08\",\r\n\"2013-09-01\", \"2013-09-15\"))\r\n```\r\n\r\n```python\r\nvDates\r\n```\r\n\r\n```python\r\nvDates.bymonth <- cut(vDates, breaks = \"month\")\r\n```\r\n\r\n```python\r\nvDates.bymonth\r\n```\r\n\r\n```python\r\ndfDates <- data.frame(vDates, vDates.bymonth)\r\n```\r\n\r\n```python\r\n#orddfDates\r\n```\r\n\r\n```python\r\n#order functions\r\n\r\ncompanyOrder <- order(companiesData$margin)\r\n```\r\n\r\n```python\r\ncompanyOrder\r\n```\r\n\r\n```python\r\ncompaniesOrdered <- companiesData[companyOrder,]\r\n```\r\n\r\n```python\r\ncompaniesOrdered\r\n\r\n```\r\n\r\n```python\r\nsort(companiesOrdered$margin)\r\n```\r\n\r\n# dplyr Package\r\n\r\n1. filter – It filters the data based on a condition  \r\n2. select – It is used to\r\nselect columns of interest from a data set  \r\n3. arrange – It is used to arrange\r\ndata set values on ascending or descending order  \r\n4. mutate – It is used to\r\ncreate new variables from existing variables  \r\n5. summarise (with group_by) – It\r\nis used to perform analysis by commonly used operations such as min, max, mean\r\ncount etc\r\n\r\n```python\r\nlibrary(dplyr)\r\n```\r\n\r\n```python\r\ndata(\"mtcars\")\r\ndata('iris') \r\n```\r\n\r\n```python\r\nmydata <- mtcars\r\nhead(mydata)\r\n```\r\n\r\n```python\r\nclass(mydata)\r\n```\r\n\r\n```python\r\nmynewdata <- tbl_df(mydata) # making the mtcars data  as local dataframe\r\nmyirisdata <- tbl_df(iris)  # making the iris data  as local dataframe\r\n```\r\n\r\n```python\r\n#mynewdata\r\n#myirisdata\r\n```\r\n\r\n```python\r\nfilter(mynewdata, cyl > 4 | gear < 2)  #use filter to filter data with required condition\r\n```\r\n\r\n```python\r\nselect(mynewdata, cyl,mpg,-hp)\r\n#mtcars[,c(mtcars$cyl,mtcars$mpg)]\r\nmtcars[,c(2,1)]\r\n```\r\n\r\n```python\r\nselect(mynewdata, cyl:gear)\r\n```\r\n\r\n```python\r\nmynewdata %>% select(cyl, wt, gear) %>% filter(wt > 2)\r\n```\r\n\r\n```python\r\nmynewdata %>% select(cyl, wt, gear) %>% arrange(wt,de) #arrange can be used to reorder rows\r\n```\r\n\r\n```python\r\nmynewdata%>%select(cyl, wt, gear)%>%arrange(desc(wt)) #for descending\r\n```\r\n\r\n```python\r\nmynewdata %>% select(mpg, cyl) %>% mutate(newvariable = mpg*cyl)\r\n```\r\n\r\n```python\r\ndf <- c(5,8,9,6,7,NA)\r\n\r\nmean(df,na.rm=TRUE)\r\n```\r\n\r\n```python\r\nmyirisdata %>% group_by(Species) %>% summarise(Average = mean(Sepal.Length, na.rm = TRUE))\r\n```\r\n\r\n```python\r\nmyirisdata\r\n\r\n```\r\n\r\n```python\r\ndata(\"airquality\")\r\nmydata <- airquality\r\ndata(iris)\r\nmyiris <- iris\r\n```\r\n\r\n```python\r\ninstall.packages(\"data.table\",repos='http://cran.us.r-project.org')\r\n```\r\n\r\n```python\r\nlibrary(data.table)\r\n```\r\n\r\n```python\r\nmydata <- data.table(mydata) \r\nmydata # in a form of data table \r\n\r\nmyiris <- data.table(myiris) \r\n```\r\n\r\n```python\r\nmydata[2:4,]\r\nairquality[2:4,]\r\n```\r\n\r\n```python\r\nmyiris[Species == 'setosa']\r\n```\r\n\r\n```python\r\nsubset(iris,iris$Species == 'setosa')\r\n```\r\n\r\n```python\r\nmyiris[Species %in% c('setosa', 'virginica')] \r\n```\r\n\r\n```python\r\nmydata[,Temp] # #select columns. Returns a vector\r\n```\r\n\r\n```python\r\nairquality[,c(\"Wind\",\"Temp\")]\r\n```\r\n\r\n```python\r\nmydata[,.(Temp,Month)]\r\n```\r\n\r\n```python\r\nmydata[,sum(Ozone, na.rm = TRUE)]\r\n```\r\n\r\n```python\r\nlibrary(dplyr)\r\nmyiris[,{print(Sepal.Length) %>% plot(Sepal.Width)}]\r\n```\r\n\r\n```python\r\nmyiris[,.(sepalsum = sum(Sepal.Length)), by=Species] #grouping by a variable\r\n```\r\n\r\n```python\r\nsetkey(myiris, Species) #select a column for computation, hence need to set the key on column\r\n```\r\n\r\n```python\r\n#selects all the rows associated with this data point\r\nmyiris['setosa']\r\n#iris['setosa']\r\nmyiris[c('setosa', 'virginica')]\r\n```\r\n\r\n# reshape2 Package\r\n\r\n```python\r\n#create a data\r\nID <- c(1,2,3,4,5)\r\nNames <- c('Joseph','Matrin','Joseph','James','Matrin')\r\nDateofBirth <- c(1993,1992,1993,1994,1992)\r\nSubject<- c('Maths','Biology','Science','Psycology','Physics')\r\n```\r\n\r\n```python\r\nthisdata <- data.frame(ID, Names, DateofBirth, Subject)\r\n```\r\n\r\n```python\r\ndata.table(thisdata)\r\n```\r\n\r\n```python\r\nlibrary(reshape2)\r\n```\r\n\r\n```python\r\n#melt\r\n#?melt\r\nmt <- melt(thisdata, id=(c('ID','Names')))\r\n```\r\n\r\n```python\r\nthisdata\r\nmt\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}